#!/usr/bin/env python3
"""
Supabase Setup Helper Script for EU Grants Monitor

This script helps you configure your Supabase project and set up the environment.
Run this script after creating your Supabase project to get guided configuration.
"""

import os
import sys
from pathlib import Path


def print_banner():
    """Print setup banner."""
    print("=" * 60)
    print("🟢 SUPABASE SETUP FOR EU GRANTS MONITOR")
    print("=" * 60)
    print()


def check_supabase_project():
    """Check if Supabase project is ready."""
    print("📋 STEP 1: CREATE SUPABASE PROJECT")
    print("-" * 40)
    print("1. Go to https://supabase.com and sign up/sign in")
    print("2. Click 'New Project'")
    print("3. Fill in project details:")
    print("   - Project Name: eu-grants-monitor")
    print("   - Database Password: (choose a strong password)")
    print("   - Region: Choose closest to your location")
    print("4. Click 'Create new project' and wait for setup")
    print()
    
    ready = input("✅ Is your Supabase project created and ready? (y/n): ").lower().strip()
    if ready != 'y':
        print("Please create your Supabase project first, then run this script again.")
        sys.exit(1)


def get_supabase_credentials():
    """Get Supabase credentials from user."""
    print("📋 STEP 2: GET SUPABASE CREDENTIALS")
    print("-" * 40)
    print("In your Supabase dashboard:")
    print("1. Go to Project Settings (⚙️ icon)")
    print("2. Click on 'API' in the left sidebar")
    print("3. Find your Project URL and API Keys")
    print()
    
    # Get Project URL
    print("📍 PROJECT URL:")
    print("   Look for 'Project URL' - it looks like: https://abcdefghijklmnop.supabase.co")
    supabase_url = input("   Enter your Project URL: ").strip()
    
    if not supabase_url.startswith("https://") or not supabase_url.endswith(".supabase.co"):
        print("❌ Invalid Project URL format. It should be: https://your-project.supabase.co")
        sys.exit(1)
    
    # Extract project reference
    project_ref = supabase_url.replace("https://", "").replace(".supabase.co", "")
    
    # Get database password
    print("\n🔒 DATABASE PASSWORD:")
    print("   This is the password you set when creating the project")
    db_password = input("   Enter your database password: ").strip()
    
    # Get API keys
    print("\n🔑 API KEYS:")
    print("   Look for 'Project API keys' section")
    
    print("   📖 Anonymous Key (anon, public):")
    anon_key = input("   Enter your anon key: ").strip()
    
    print("   🔐 Service Role Key (service_role, secret):")
    print("   ⚠️  Keep this secret - it has admin access!")
    service_key = input("   Enter your service role key: ").strip()
    
    # Build database URL
    database_url = f"postgresql://postgres:{db_password}@{project_ref}.supabase.co:5432/postgres"
    
    return {
        "SUPABASE_URL": supabase_url,
        "SUPABASE_DATABASE_URL": database_url,
        "SUPABASE_ANON_KEY": anon_key,
        "SUPABASE_SERVICE_ROLE_KEY": service_key,
        "PROJECT_REF": project_ref
    }


def create_env_file(credentials):
    """Create or update .env file with Supabase credentials."""
    print("\n📋 STEP 3: CREATE ENVIRONMENT FILE")
    print("-" * 40)
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    # Read existing .env if it exists
    existing_env = {}
    if env_file.exists():
        print("📄 Found existing .env file - will update with Supabase settings")
        with open(env_file, "r") as f:
            for line in f:
                line = line.strip()
                if "=" in line and not line.startswith("#"):
                    key, value = line.split("=", 1)
                    existing_env[key] = value
    else:
        print("📄 Creating new .env file from template")
        if env_example.exists():
            with open(env_example, "r") as f:
                content = f.read()
            # Extract non-Supabase settings from template
            for line in content.split("\n"):
                line = line.strip()
                if "=" in line and not line.startswith("#") and "SUPABASE" not in line:
                    key, value = line.split("=", 1)
                    if key not in existing_env:
                        existing_env[key] = value
    
    # Update with Supabase credentials
    existing_env.update(credentials)
    
    # Write .env file
    with open(env_file, "w") as f:
        f.write("# EU Grants Monitor - Environment Configuration\n")
        f.write("# Generated by Supabase setup script\n\n")
        
        f.write("# =============================================================================\n")
        f.write("# SUPABASE CONFIGURATION\n")
        f.write("# =============================================================================\n")
        f.write(f"SUPABASE_DATABASE_URL={credentials['SUPABASE_DATABASE_URL']}\n")
        f.write(f"SUPABASE_URL={credentials['SUPABASE_URL']}\n")
        f.write(f"SUPABASE_ANON_KEY={credentials['SUPABASE_ANON_KEY']}\n")
        f.write(f"SUPABASE_SERVICE_ROLE_KEY={credentials['SUPABASE_SERVICE_ROLE_KEY']}\n")
        f.write("\n")
        
        # Write other environment variables
        f.write("# =============================================================================\n")
        f.write("# OTHER CONFIGURATION\n")
        f.write("# =============================================================================\n")
        for key, value in existing_env.items():
            if not key.startswith("SUPABASE"):
                f.write(f"{key}={value}\n")
    
    print(f"✅ Environment file created: {env_file.absolute()}")


def test_connection(credentials):
    """Test database connection."""
    print("\n📋 STEP 4: TEST DATABASE CONNECTION")
    print("-" * 40)
    
    try:
        from sqlalchemy import create_engine, text
        
        engine = create_engine(credentials['SUPABASE_DATABASE_URL'])
        
        print("🔄 Testing connection...")
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version();"))
            version = result.fetchone()[0]
            
        print(f"✅ Connection successful!")
        print(f"📊 PostgreSQL version: {version.split(' ')[1]}")
        
        return True
    except ImportError:
        print("⚠️  SQLAlchemy not installed - skipping connection test")
        print("   Run: pip install -r requirements.txt")
        return True
    except Exception as e:
        print(f"❌ Connection failed: {e}")
        print("\n🔧 Troubleshooting:")
        print("   1. Check your database password is correct")
        print("   2. Make sure your project is fully initialized (can take a few minutes)")
        print("   3. Verify the project URL is correct")
        return False


def run_migrations():
    """Run database migrations."""
    print("\n📋 STEP 5: SET UP DATABASE SCHEMA")
    print("-" * 40)
    
    print("🔄 Creating initial database migration...")
    
    try:
        os.system("alembic revision --autogenerate -m 'Initial migration for EU Grants Monitor'")
        print("✅ Migration created!")
        
        print("🔄 Running migration to create tables...")
        os.system("alembic upgrade head")
        print("✅ Database schema created!")
        
    except Exception as e:
        print(f"❌ Migration failed: {e}")
        print("\n🔧 To run manually:")
        print("   alembic revision --autogenerate -m 'Initial migration'")
        print("   alembic upgrade head")


def print_next_steps(credentials):
    """Print next steps."""
    print("\n" + "=" * 60)
    print("🎉 SUPABASE SETUP COMPLETE!")
    print("=" * 60)
    
    print("\n📋 WHAT'S BEEN CONFIGURED:")
    print(f"   🟢 Supabase Project: {credentials['PROJECT_REF']}")
    print(f"   🗄️  Database URL: Ready")
    print(f"   🔑 API Keys: Configured")
    print(f"   📄 Environment: .env file created")
    
    print("\n🚀 NEXT STEPS:")
    print("   1. Install dependencies:")
    print("      pip install -r requirements.txt")
    print()
    print("   2. Run the development server:")
    print("      uvicorn app.main:app --reload")
    print()
    print("   3. Optional Supabase features:")
    print("      - Row Level Security (RLS)")
    print("      - Real-time subscriptions")
    print("      - Built-in authentication")
    print("      - File storage buckets")
    
    print("\n🔗 USEFUL LINKS:")
    print(f"   📊 Supabase Dashboard: {credentials['SUPABASE_URL']}")
    print("   📚 Supabase Docs: https://supabase.com/docs")
    print("   🐍 Python Client: https://supabase.com/docs/reference/python")
    
    print("\n⚙️  PRODUCTION DEPLOYMENT:")
    print("   - Set environment variables on your hosting platform")
    print("   - Use connection pooling URL for better performance:")
    print(f"     postgresql://postgres:PASSWORD@{credentials['PROJECT_REF']}.pooler.supabase.co:6543/postgres")


def main():
    """Main setup function."""
    print_banner()
    
    # Step 1: Check if Supabase project is ready
    check_supabase_project()
    
    # Step 2: Get credentials
    credentials = get_supabase_credentials()
    
    # Step 3: Create .env file
    create_env_file(credentials)
    
    # Step 4: Test connection
    if not test_connection(credentials):
        print("\n❌ Setup incomplete due to connection issues.")
        print("Please fix the connection issues and run the script again.")
        sys.exit(1)
    
    # Step 5: Run migrations
    migrate = input("\n🔄 Run database migrations now? (y/n): ").lower().strip()
    if migrate == 'y':
        run_migrations()
    
    # Step 6: Print next steps
    print_next_steps(credentials)


if __name__ == "__main__":
    main()
